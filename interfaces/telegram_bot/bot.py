import asyncio
from telethon import TelegramClient
from telethon.errors import RPCError
from config import settings, logger
from interfaces.telegram_bot.router import router
from pathlib import Path
from interfaces.telegram_bot.utils.inject_user_context import inject_user

client: TelegramClient | None = None

async def run_bot():
    global client
    stop_event = asyncio.Event()

    client = TelegramClient(
        "bot",
        api_id=settings.tg_api_id,
        api_hash=settings.tg_api_hash,
        connection_retries=9999,
        retry_delay=5
    )

    # –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –î–û –∏–º–ø–æ—Ä—Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    router.use(inject_user())  # –ü—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º

    handlers_path = Path(__file__).parent / "handlers"
    router.autoimport(handlers_path)
    await router.register(client)

    await client.start(bot_token=settings.tg_bot_token)  # type: ignore
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
    heartbeat_task = asyncio.create_task(heartbeat(stop_event))

    try:
        await client.run_until_disconnected()  # type: ignore
    except RPCError as e:
        logger.exception("‚ùå RPCError: %s", e)
    except (ConnectionError, OSError) as e:
        logger.exception("‚ùå –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %s", e)
    except Exception as e:
        logger.exception("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
    finally:
        await shutdown(stop_event)
        heartbeat_task.cancel()
        try:
            await heartbeat_task
        except asyncio.CancelledError:
            logger.debug("‚úÖ Heartbeat –∑–∞–≤–µ—Ä—à—ë–Ω")


async def heartbeat(stop_event: asyncio.Event):
    while not stop_event.is_set():
        logger.debug("üíì Heartbeat: –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        await asyncio.sleep(60)


async def shutdown(stop_event: asyncio.Event):
    if client and client.is_connected():
        logger.info("‚õî –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
        await client.disconnect()  # type: ignore
    stop_event.set()
