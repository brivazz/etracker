from typing import cast
from telethon import Button, events
from application.factories.uow_factories import get_uow
from application.main_orchestrator import MainOrchestrator
from application.dto.category_dto import CategoryInDBDTO
from application.dto.user_dto import UserIdDTO, UserInDBDTO
from application.commands.command_enum import Command
from telethon.tl.custom import Message
from interfaces.telegram_bot.keyboards.common_keyboard import default_nav_buttons_keyboard


SELECT_CATEGORY_TEXT = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"


async def expense_keyboard(user_id: int):
    """–¢—É—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É."""
    async with get_uow() as uow:
        main_orchestrator = MainOrchestrator(uow=uow)
        dto = UserIdDTO(user_id=user_id)
        categories = cast(list[CategoryInDBDTO], await main_orchestrator.handle_command(
            command=Command.GET_USER_CATEGORIES,
            dto=dto
        ))
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
    if not categories:
        return [
            [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", b"add_category")],
            [Button.inline("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", b"home")]
        ], "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É, —á—Ç–æ–±—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—ã."
    # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    buttons = [
        Button.inline(cat.name.upper(), f"cat_{cat.id}:{cat.name}".encode())
        for cat in categories
    ]
    grouped = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" –æ—Ç–¥–µ–ª—å–Ω–æ
    grouped.append([Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", b"add_category")])
    grouped.append([Button.inline("‚Ü©Ô∏è –ù–∞–∑–∞–¥", b"back")])
    return grouped, SELECT_CATEGORY_TEXT


async def before_input_amount_keyboard(category_name: str):
    """–ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª–∏/–Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
    new_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: **{category_name.upper()}**. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:"
    new_buttons = await default_nav_buttons_keyboard()
    return new_text, new_buttons


async def before_save_amount_keyboard(event: events.NewMessage.Event, amount: float, category_name: str, input_message_id: int):
    """–ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–∑–∞–ø–∏—Å—å—é –Ω–æ–≤–æ–π —Ç—Ä–∞—Ç—ã, –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å—É–º–º—É."""
    text = f"‚úîÔ∏è–°—É–º–º–∞: {amount:.2f} —Ä—É–±. | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name.upper()}"
    buttons=[
        [Button.inline("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", b"change_expense"), Button.inline("‚ùåÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", b"cancel")],
        [Button.inline("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", b"save_expense")],
        [Button.inline("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", b"home"), Button.inline("‚Ü©Ô∏è –ù–∞–∑–∞–¥", b"back")]
    ]# + await default_nav_buttons_keyboard()
    await event.client.edit_message(entity=event.chat_id, message=input_message_id, text=text, buttons=buttons)
    return text, buttons


async def after_save_expense_keyboard(event: events.NewMessage.Event, amount: float, category_name: str, input_message_id: int):
    """–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–π —Ç—Ä–∞—Ç—ã, –∫–æ–≥–¥–∞ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å—É–º–º—É."""
    text = f"‚úÖ–¢—Ä–∞—Ç–∞ –Ω–∞ {amount:.2f} ‚ÇΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_name.upper()}"
    buttons=[
        [Button.inline("üóë –£–¥–∞–ª–∏—Ç—å", b"delete_expense")],
        [Button.inline("‚Ü©Ô∏è –ù–∞–∑–∞–¥", b"back")], [Button.inline("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", b"home")]]
    await event.client.edit_message(entity=event.chat_id, message=input_message_id, text=text, buttons=buttons)
    return text, buttons


async def edit_last_expense_keyboard(event: events.CallbackQuery.Event) -> Message:
    """–¢—É—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞—Ç—ã."""
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞—Ç—ã:"
    buttons = [
            Button.inline("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", b"home"),
            Button.inline("‚Ü©Ô∏è –ù–∞–∑–∞–¥", b"back"),
            Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", b"cancel"),
        ]
    return await event.edit(text, buttons=buttons)


async def after_input_amount_for_edit_expense_keyboard(event: events.NewMessage.Event, new_amount: float, input_message_id):
    await event.client.edit_message(
            entity=event.chat_id,
            message=input_message_id,
            text = f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_amount:.2f} —Ä—É–±.",
            buttons=await default_nav_buttons_keyboard()
        )


async def after_repeat_last_expense_keyboard(event: events.CallbackQuery.Event, last_expense_amount: float, category_name: str):
    text = f"üîÅ –£—Å–ø–µ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ —Ç—Ä–∞—Ç—É: {last_expense_amount} —Ä—É–±., –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name.upper()}"
    await event.edit(text, buttons=await default_nav_buttons_keyboard())


# TODO: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ–∑–¥–µ —ç—Ç–∏ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏—Ö –∏–∑ default_nav_buttons
# –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
async def after_delete_last_expense_keyboard(event: events.CallbackQuery.Event, last_expense_amount, category_name):
    """–¢—É—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–π —Ç—Ä–∞—Ç—ã."""
    text = f"–ó–∞–ø–∏—Å—å –Ω–∞ —Å—É–º–º—É {last_expense_amount} –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name.upper()} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
    buttons = [
            Button.inline("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", b"home"),
            Button.inline("‚Ü©Ô∏è –ù–∞–∑–∞–¥", b"back"),
            Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", b"cancel"),
        ]
    await event.edit(text, buttons=buttons)
